/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library.management.system;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/**
 *
 * @author SHAKTHI GANAPATHY S
 */
public class ViewBooks extends javax.swing.JFrame {

    private String sql;

    /**
     * Creates new form ViewBooks
     */
    public ViewBooks() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        modify = new javax.swing.JButton();
        save = new javax.swing.JButton();
        undo = new javax.swing.JButton();
        showdata = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tf1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel1.setText("                                                   VIEW BOOKS");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ACCESSNO", "BOOKNAME", "AUTHORNAME", "PUBLICATION", "EDITION", "YEAR", "AMOUNT"
            }
        ));
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        delete.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        modify.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        modify.setText("MODIFY");

        save.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        save.setText("SAVE");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        undo.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        undo.setText("UNDO");

        showdata.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        showdata.setText("SHOW DATA");
        showdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showdataActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        back.setText("BACK");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("SEARCH   ");

        tf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf1ActionPerformed(evt);
            }
        });
        tf1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(undo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(modify, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(159, 159, 159))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tf1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showdata, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(509, 509, 509))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showdata, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(undo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modify, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(135, 135, 135))
        );

        setSize(new java.awt.Dimension(1190, 841));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/lib","root","");
            Statement st=con.createStatement();
            st.execute("Save edited set name=");
            
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_saveActionPerformed

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded
        // TODO add your handling code here:
          
         /**     try {
                  Class.forName("com.mysql.jdbc.Driver");
              } catch (ClassNotFoundException ex) {
                  Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex);
              }
             Connection con = null;
              try {
                  con = DriverManager.getConnection("jdbc:mysql://localhost:3306/lib","root","");
              } catch (SQLException ex) {
                  Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex);
              }
            Statement st = null;
              try {
                  st = con.createStatement();
              } catch (SQLException ex) {
                  Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex);
              }
            ResultSet rs = null;
              try {
                  rs = st.executeQuery(sql);
              } catch (SQLException ex) {
                  Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex);
              }
            JTable book_list=new JTable();
            String[] bookColumnNames={"sno","Access no","Book Name","Author Name","Publication","Edition","Year","Amount"};
            DefaultTableModel bookModel=new DefaultTableModel();
            bookModel.setColumnIdentifiers(bookColumnNames);
            book_list.setAutoResizeMode(JTable.Auto_Resize_All_Columns);
            book_list.setFillsViewportHeight(true);
            book_list.setFocusable(false);
            JScrollPane scrollBook=new JScrollPane(book_list);
            scrollBook.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollBook.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            
              
                  while(rs.next())
                  {
                      int sno;
                      try {
                          sno = rs.getInt(1);
                          String accessno=rs.getString(2);
                          String bookname=rs.getString(3);
                          String authorname=rs.getString(4);
                          String publication=rs.getString(5);
                          int edition=rs.getInt(6);
                          int year=rs.getInt(7);
                          float amount=rs.getFloat(8);
                          bookModel.addRow(new Object[]{sno,bookname,authorname,publication,edition,year,amount});
                          Main.ViewBooksFrame.add(scrollBook);
                          Main.ViewBooksFrame.setSize(800,400);
                          Main.ViewBooksFrame.setVisible(true);
                      } catch (SQLException ex) {
                          Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex);
                          JOptionPane.showMessageDialog(null,ex);
                      
                    }**/
    }//GEN-LAST:event_jTable1AncestorAdded

    private void showdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showdataActionPerformed
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/lib","root","");
            Statement st=con.createStatement();
            String sql="select * from books";
            ResultSet rs=st.executeQuery(sql);
            
            while(rs.next())
            {
                String ACCESSNO=rs.getString("access no");
                String BOOKNAME=rs.getString("book name");
                String AUTHORNAME=rs.getString("author name");
                String PUBLICATION=rs.getString("publication");
                String EDITION=String.valueOf(rs.getInt("edition"));
                String YEAR=String.valueOf(rs.getInt("year"));
                String AMOUNT=String.valueOf(rs.getFloat("amount"));
                
                //string array for store data into jtable
                
                String books[]={ACCESSNO,BOOKNAME,AUTHORNAME,PUBLICATION,EDITION,YEAR,AMOUNT};
                DefaultTableModel tb1Model=(DefaultTableModel)jTable1.getModel();
                
                //add string add data into jtable
                
                tb1Model.addRow(books);
            }
            con.close();
            /**  try{
             * //open connection
             * Class.forName("com.mysql.jdbc.Driver");
             * Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/lib","root","");
             * Statement st=con.createStatement();
             * //mysql query
             * String sql="Select * from books";
             * ResultSet rs=st.executeQuery(sql);
             * 
             * while(rs.next())
             * {
             * //data will be added until finish
             * String accessno=String.valueOf(rs.getInt("accessno"));//conversion due to int value
             * 
             * String bookname=rs.getString("bookname");//here "bookname"is column name
             * String authorname=rs.getString("authorname");
             * String publication=rs.getString("publication");
             * String edition=String.valueOf(rs.getInt("edition"));
             * String year=String.valueOf(rs.getInt("year"));
             * String amount=String.valueOf(rs.getFloat("amount"));
             * 
             * //string any for store data into jtable
             * 
             * String tbData[]={accessno,bookname,authorname,publication,edition,year,amount};
             * DefaultTableModel tblModel=(DefaultTableModel)jTable1.getModel();
             * 
             * //add string array data into jtable
             * tblModel.addRow(tbData);
             * }
             * 
             * }catch(Exception e){
             * JOptionPane.showMessageDialog(null,e);
             * }**/
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_showdataActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        Main m=new Main();
        m.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

         DefaultTableModel table=(DefaultTableModel)jTable1.getModel();
         String search=tf1.getText().toLowerCase();
         TableRowSorter<DefaultTableModel>tr=new TableRowSorter<DefaultTableModel>(table);
         jTable1.setRowSorter(tr);
         tr.setRowFilter(RowFilter.regexFilter(search));






        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyReleased

    private void tf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf1ActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased

    private void tf1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf1KeyReleased
        // TODO add your handling code here:
         DefaultTableModel table=(DefaultTableModel)jTable1.getModel();
         String search=tf1.getText().toLowerCase();
         TableRowSorter<DefaultTableModel>tr=new TableRowSorter<DefaultTableModel>(table);
         jTable1.setRowSorter(tr);
         tr.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_tf1KeyReleased

    /**
     * @param args the command line arguments
     */
       // catch (SQLException ex) {
           // Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex);
    /**
     * @param args the command line arguments
     */
       // catch (SQLException ex) {
            //Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex);    /**
  //   * @param args the command line arguments
  //   */
            //  catch (SQLException ex) {
                //  Logger.getLogger(ViewBooks.class.getName()).log(Level.SEVERE, null, ex); /**
    // * @param args the command line arguments
   //  */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton modify;
    private javax.swing.JButton save;
    private javax.swing.JButton showdata;
    private javax.swing.JTextField tf1;
    private javax.swing.JButton undo;
    // End of variables declaration//GEN-END:variables
}
